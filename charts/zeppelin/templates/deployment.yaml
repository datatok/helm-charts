apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "zeppelin.fullname" . }}
  labels:
    {{- include "zeppelin.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "zeppelin.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "zeppelin.selectorLabels" . | nindent 8 }}
        {{- with.Values.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "zeppelin.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      enableServiceLinks: false
      volumes:
        - name: config
          configMap:
            name: {{ include "zeppelin.fullname" . }}-config
            items:
            - key: log4j.properties
              path: log4j.properties
            - key: shiro.ini.template
              path: shiro.ini.template
        - name: site-config
          configMap:
            name: {{ include "zeppelin.fullname" . }}-site-config
            items:
            - key: zeppelin-site.xml
              path: zeppelin-site.xml
        - name: interpreter-config
          configMap:
            name: {{ include "zeppelin.fullname" . }}-interpreter-config
            items:
            - key: interpreter.json
              path: interpreter.json
        - name: config-volume
          emptyDir: {}
        - name: spark-config-volume
          emptyDir: {}
        - name: zep-tmp
          emptyDir: {}
        - name: zep-conf
          emptyDir: {}
        - name: zep-webapps
          emptyDir: {}
        - name: zep-notebooks
          emptyDir: {}
        - name: zep-logs
          emptyDir: {}
        - name: etc-hack
          emptyDir: {}
        {{- if .Values.sparkEmbedded.enabled }}
        - name: spark-home
          emptyDir: {}
        {{- end }}
      initContainers:
      {{- if .Values.sparkEmbedded.enabled }}
      - name: {{ .Chart.Name }}-spark-init
        securityContext: &containerSecurityContext
          {{- toYaml .Values.securityContext | nindent 12 }}
        {{- with .Values.sparkEmbedded.image }}
        image: "{{ .registry }}/{{ .repository }}:{{ .tag }}"
        imagePullPolicy: {{ .pullPolicy }}
        {{- end }}
        command: ["sh", "-c", "cp -r {{ .Values.sparkEmbedded.copyDirectory }}/* /spark/"]
        resources: &initContainerResources
          requests:
            cpu: 10m
            memory: 16Mi
          limits:
            cpu: 50m
            memory: 64Mi
        volumeMounts:
        - name: spark-home
          mountPath: /spark
      {{- end }}
      - name: {{ .Chart.Name }}-config-init
        securityContext:
          <<: *containerSecurityContext
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - '/bin/sh'
        - '-c'
        - >
          cp conf/* prepared_conf;
        resources:
          <<: *initContainerResources
        volumeMounts:
        - name: zep-conf
          mountPath: /opt/zeppelin/prepared_conf
        - name: config
          mountPath: /opt/zeppelin/conf/log4j.properties
          subPath: log4j.properties
        - name: site-config
          mountPath: /opt/zeppelin/conf/zeppelin-site.xml
          subPath: zeppelin-site.xml
        - name: interpreter-config
          mountPath: /opt/zeppelin/conf/interpreter.json
          subPath: interpreter.json
      - name: {{ .Chart.Name }}-fix-user
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - '/bin/sh'
        - '-c'
        - |+
          myuid=$(id -u)
          mygid=$(id -g)
          uidentry=$(getent passwd $myuid)

          cp /etc/passwd /opt/my-etc/passwd

          if [ -z "$uidentry" ] ; then
              if [ -w /opt/my-etc/passwd ] ; then
                  echo "zeppelin:x:$myuid:$mygid:Zeppelin user:${PWD}:/bin/false" >> /opt/my-etc/passwd
              else
                  echo "Container ENTRYPOINT failed to add passwd entry for zeppelin UID"
              fi
          fi
        resources:
          <<: *initContainerResources
        volumeMounts:
        - name: etc-hack
          mountPath: /opt/my-etc
      {{- if eq .Values.notebookStorage.type "git" }}
      - name: {{ .Chart.Name }}-git-init
        securityContext:
          <<: *containerSecurityContext
        image: "bitnami/git:2-debian-10"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        workingDir: /opt/zeppelin/notebook
        command:
        - '/bin/sh'
        - '-c'
        - |+
          git clone ${REPO_URL} .
          git config user.name "datahub zeppelin"
          git config user.email "z.datahub@qwant.com"
          git config pull.ff only
        resources:
          <<: *initContainerResources
        volumeMounts:
        - name: zep-notebooks
          mountPath: /opt/zeppelin/notebook
        env:
        - name: GIT_SSL_NO_VERIFY
          value: "true"
        - name: REPO_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.notebookStorage.repositorySecret }}
              key: url
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            <<: *containerSecurityContext
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - name: http
            containerPort: {{ .Values.service.port }}
            protocol: TCP
          - name: rpc
            containerPort: {{ .Values.service.rpcPort }}
            protocol: TCP
          {{- if .Values.sparkEmbedded.enabled }}
          - name: spark-ui
            containerPort: {{ .Values.sparkEmbedded.portWebUI }}
            protocol: TCP
          {{- end }}
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          workingDir: /opt/zeppelin
          env:
          - name: ZEPPELIN_WAR_TEMPDIR
            value: webapps/tmp_dir
          - name: ZEPPELIN_MEM
            value:  {{ .Values.zeppelin.server.jvmMemOptions }}
          - name: POD_UID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SERVICE_DOMAIN
            value: {{ .Values.zeppelin.serviceDomain }}
          {{- if .Values.sparkEmbedded.enabled }}
          - name: SPARK_HOME
            value: /spark
          - name: SPARK_LOCAL_HOSTNAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: ZEPPELIN_RUN_MODE
            value: local
          {{- end }}
          {{- with .Values.extraEnvVars }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
          volumeMounts:
          - name: zep-tmp
            mountPath: /tmp
          - name: zep-conf
            mountPath: /opt/zeppelin/conf
          - name: zep-webapps
            mountPath: /opt/zeppelin/webapps
          - name: zep-notebooks
            mountPath: /opt/zeppelin/notebook
          - name: zep-logs
            mountPath: /opt/zeppelin/logs
          - name: etc-hack
            mountPath: /etc/passwd
            subPath: passwd
          {{- if .Values.sparkEmbedded.enabled }}
          - name: spark-home
            mountPath: /spark
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
