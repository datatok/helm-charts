apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "spark-worker.fullname" . }}
  labels:
    {{- include "spark-worker.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "spark-worker.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: {{- include "spark-worker.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "spark-worker.selectorLabels" . | nindent 8 }}
        {{ include "spark.labelSparkRole" . -}}: worker
    spec:
      {{- include "spark.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "component" "worker" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "component" "worker" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      enableServiceLinks: false
      initContainers:
      - name: {{ .Chart.Name }}-fix-conf
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: {{ include "spark.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
        - '/bin/sh'
        - '-c'
        - >
          cp /opt/bitnami/spark/conf/* /opt/bitnami/spark/conf2
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
          limits:
            cpu: 50m
            memory: 32Mi
        volumeMounts:
        - name: spark-conf
          mountPath: /opt/bitnami/spark/conf2
      containers:
        - name: spark-worker
          image: {{ include "spark.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.app.webPort }}
              protocol: TCP
          {{- if .Values.app.clusterPort }}
            - name: cluster
              containerPort: {{ .Values.app.clusterPort }}
          {{- end }}
          {{- if .Values.app.extraPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.app.extraPorts "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: bitnami-tmp
              mountPath: /opt/bitnami/spark/tmp
            - name: spark-work
              mountPath: /opt/bitnami/spark/work
            - name: spark-logs
              mountPath: /opt/bitnami/spark/logs
            - name: spark-conf
              mountPath: /opt/bitnami/spark/conf
            {{- if .Values.app.configurationConfigMap }}
            - name: config
              mountPath: '/opt/bitnami/spark/conf/'
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- tpl (toYaml .Values.extraVolumeMounts) $ | nindent 12 }}
            {{- end }}
          env:
            - name: SPARK_MODE
              value: "worker"
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
            - name: SPARK_DAEMON_MEMORY
              value: {{ .Values.app.daemonMemoryLimit | quote }}
            {{- if .Values.metrics.enabled }}
            - name: SPARK_METRICS_ENABLED
              value: "true"
            {{- end}}
            ## There are some environment variables whose existence needs
            ## to be checked because Spark checks if they are null instead of an
            ## empty string
            {{- if .Values.app.memoryLimit }}
            - name: SPARK_WORKER_MEMORY
              value: {{ .Values.app.memoryLimit | quote }}
            {{- end }}
            {{- if .Values.app.coreLimit }}
            - name: SPARK_WORKER_CORES
              value: {{ .Values.app.coreLimit | quote }}
            {{- end }}
            {{- if .Values.app.clusterPort }}
            - name: SPARK_WORKER_PORT
              value: {{ .Values.app.clusterPort | quote }}
            {{- end }}
            {{- if .Values.app.webPort  }}
            - name: SPARK_WORKER_WEBUI_PORT
              value: {{ .Values.app.webPort | quote }}
            {{- end }}
            {{- if .Values.app.dir }}
            - name: SPARK_WORKER_DIR
              value: {{ .Values.app.dir | quote }}
            {{- end }}
            - name: SPARK_DAEMON_JAVA_OPTS
              value: {{ .Values.app.javaOptions | quote }}
            - name: SPARK_MASTER_URL
              value: spark://{{ .Values.app.master.host }}:{{ .Values.app.master.port }}
            # If you use a custom properties file, it must be loaded using a ConfigMap
            - name: SPARK_WORKER_OPTS
              value: {{ .Values.app.configOptions }}
            {{- if .Values.extraEnvVars }}
            {{- toYaml .Values.extraEnvVars | nindent 10 }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.app.webPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.app.webPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- end }}
          {{- with .Values.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: bitnami-tmp
          emptyDir: {}
        - name: spark-work
          emptyDir: {}
        - name: spark-logs
          emptyDir: {}
        - name: spark-conf
          emptyDir: {}
        {{- if .Values.app.configurationConfigMap }}
        - name: config
          configMap:
            name: {{ .Values.app.configurationConfigMap }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- tpl (toYaml .Values.extraVolumes) $ | nindent 8 }}
        {{- end }}
