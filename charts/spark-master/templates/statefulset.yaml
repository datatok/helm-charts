apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "spark-master.fullname" . }}
  labels:
    {{- include "spark-master.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "spark-master.fullname" . }}-headless
  replicas: 1
  selector:
    matchLabels: {{- include "spark-master.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "spark-master.selectorLabels" . | nindent 8 }}
        {{ include "spark.labelSparkRole" . -}}: master
    spec:
      {{- include "spark.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "spark-master.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      enableServiceLinks: false
      initContainers:
      - name: {{ .Chart.Name }}-fix-conf
        securityContext: {{- toYaml .Values.securityContext | nindent 10 }}
        image: {{ include "spark.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
        - '/bin/sh'
        - '-c'
        - >
          cp /opt/bitnami/spark/conf/* /opt/bitnami/spark/conf2
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
          limits:
            cpu: 50m
            memory: 32Mi
        volumeMounts:
        - name: spark-conf
          mountPath: /opt/bitnami/spark/conf2
      containers:
        - name: spark-master
          image: {{ include "spark.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.app.webPort }}
              protocol: TCP
            - name: cluster
              containerPort: {{ .Values.app.clusterPort }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: bitnami-tmp
              mountPath: /opt/bitnami/spark/tmp
            - name: spark-logs
              mountPath: /opt/bitnami/spark/logs
            - name: spark-conf
              mountPath: /opt/bitnami/spark/conf
            {{- if .Values.app.configurationConfigMap }}
            - name: config
              mountPath: '/opt/bitnami/spark/conf/'
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- tpl (toYaml .Values.extraVolumeMounts) $ | nindent 12 }}
            {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
            - name: SPARK_MODE
              value: "master"
            - name: SPARK_PUBLIC_DNS
              value: spark.dev-steam.c2.par1.kube.qwant.ninja
            {{- if .Values.metrics.enabled }}
            - name: SPARK_METRICS_ENABLED
              value: "true"
            {{- end}}
            - name: SPARK_DAEMON_MEMORY
              value: {{ .Values.app.daemonMemoryLimit | quote }}
            {{- if .Values.app.clusterPort }}
            - name: SPARK_MASTER_PORT
              value: {{ .Values.service.clusterPort | quote }}
            {{- end }}
            {{- if .Values.app.webPort }}
            - name: SPARK_MASTER_WEBUI_PORT
              value: {{ .Values.app.webPort | quote }}
            {{- end }}
            {{- if .Values.app.configOptions }}
            - name: SPARK_MASTER_OPTS
              value: {{ .Values.app.configOptions | quote }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- toYaml .Values.extraEnvVars | nindent 10 }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.app.webPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.app.webPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- end }}
          {{- with .Values.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: bitnami-tmp
          emptyDir: {}
        - name: spark-logs
          emptyDir: {}
        - name: spark-conf
          emptyDir: {}
        {{- if .Values.app.configurationConfigMap }}
        - name: config
          configMap:
            name: {{ .Values.app.configurationConfigMap }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- tpl (toYaml .Values.extraVolumes) $ | nindent 8 }}
        {{- end }}