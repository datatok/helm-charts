replicaCount: 3

image:
  repository: rabbitmq
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

service:
  # -- service type
  type: ClusterIP
  # -- service annotations
  annotations: {}
  #  service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0

ingress:
  enabled: false
  podSelector: {}
  #  namespaceSelector:
  #    matchLabels:
  #      name: nginx-ingress
  className: ""
  annotations: {}
    # nginx.ingress.kubernetes.io/affinity: cookie
    # nginx.ingress.kubernetes.io/affinity-mode: persistent
    # nginx.ingress.kubernetes.io/session-cookie-name: infra-ingress-session
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

networkPolicy:
  # -- enable network policy
  enabled: false
  # -- specify AMQP port selector (full open else)
  clientPodSelector: {}
  # -- add extra NP egress rules
  extraEgressRules: []
  # -- add extra NP ingress rules
  extraIngressRules: []

resources:
#  requests:
#    cpu: 100m
#    memory: 1Gi
#  limits:
#    cpu: 100m
#    memory: 1Gi

persistence:
  # -- will create a PVC
  enabled: false
  # -- storage classe
  storageClassName: fast
  # -- storage size
  storage: 20Gi

rabbitmq:
  additionalConfig: ""
  advancedConfig: ""
  additionalPlugins: []

  vhosts: []
  # - test

  # -- Define queues (name is the real queue name)
  queues: []
  #- name: events
  #  spec:
  #    durable: true

  # -- Define exchanges (name is the real exchange name)
  exchanges: []
  #- name: fanout
  #  spec:
  #    type: fanout
  #    autoDelete: false
  #    durable: true

  # -- Define bindings (name only for K8S object)
  bindings: []
  #- name: events
  #  spec:
  #    source: fanout
  #    destination: events
  #    destinationType: queue

  # -- Define permissions (name only for K8S object)
  permissions: []
  #- name: user1
  #  spec:
  #    user: "user1"
  #    permissions:
  #      write: ".*"
  #      configure: ".*"
  #      read: ".*"

  # -- Define users (name only for K8S object)
  users: []
  #- name: user1
  #  spec:
  #    tags: ["monitoring"]
  #  secret: toto

operator:
  # -- namespace where is the operator (used by network-policy)
  namespace: rabbitmq-system

cluster:
  # -- cluster CRD annotations
  annotations: {}
  # -- cluster CRD spec.override
  override: {}
  # service: {}
  # statefulSet: {}
  # -- cluster CRD extra spec
  extraSpec: {}

## @section Metrics Parameters
##

metrics:
  ## Prometheus Service Monitor
  ## ref: https://github.com/coreos/prometheus-operator
  ##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
  ##
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
    ##
    enabled: false
    ## @param metrics.serviceMonitor.namespace The namespace in which the ServiceMonitor will be created
    ##
    namespace: ""
    ## @param metrics.serviceMonitor.interval The interval at which metrics should be scraped
    ##
    interval: 30s
    ## @param metrics.serviceMonitor.scrapeTimeout The timeout after which the scrape is ended
    ##
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.relabellings Metrics RelabelConfigs to apply to samples before scraping.
    ##
    relabellings: []
    ## @param metrics.serviceMonitor.metricRelabelings Metrics RelabelConfigs to apply to samples before ingestion.
    ##
    metricRelabelings: []
    ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
    ##
    honorLabels: false
    ## @param metrics.serviceMonitor.additionalLabels Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus
    ##
    additionalLabels: {}
