apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}-master
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: master
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "common.names.fullname" . }}-headless
  replicas: 1
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: master
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: master
        {{- if .Values.master.extraPodLabels }}
          {{- include "common.tplvalues.render" (dict "value" .Values.master.extraPodLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if or .Values.master.podAnnotations .Values.metrics.enabled }}
      annotations:
      {{- if .Values.master.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.master.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      {{- if and .Values.metrics.enabled }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.metrics.masterAnnotations "context" $) | nindent 8 }}
      {{- end }}
      {{- end }}
    spec:
      {{- include "spark.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.master.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.master.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.master.podAffinityPreset "component" "master" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.master.podAntiAffinityPreset "component" "master" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.master.nodeAffinityPreset.type "key" .Values.master.nodeAffinityPreset.key "values" .Values.master.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.master.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.master.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.master.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.master.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.master.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.master.tolerations "context" $) | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: {{ .Chart.Name }}-fix-conf
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: {{ include "spark.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
        - '/bin/sh'
        - '-c'
        - >
          cp /opt/bitnami/spark/conf/* /opt/bitnami/spark/conf2
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
          limits:
            cpu: 50m
            memory: 32Mi
        volumeMounts:
        - name: spark-conf
          mountPath: /opt/bitnami/spark/conf2
      containers:
        - name: spark-master
          image: {{ include "spark.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.master.webPort }}
              protocol: TCP
            - name: cluster
              containerPort: {{ .Values.master.clusterPort }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: bitnami-tmp
              mountPath: /opt/bitnami/spark/tmp
            - name: spark-logs
              mountPath: /opt/bitnami/spark/logs
            - name: spark-conf
              mountPath: /opt/bitnami/spark/conf
            {{- if .Values.master.configurationConfigMap }}
            - name: config
              mountPath: '/opt/bitnami/spark/conf/'
            {{- end }}
            {{- if .Values.security.ssl.enabled }}
            - name: shared-certs
              mountPath: '/opt/bitnami/spark/conf/certs'
              readOnly: true
            {{- end }}
            {{- if .Values.master.extraVolumeMounts }}
            {{- tpl (toYaml .Values.master.extraVolumeMounts) $ | nindent 12 }}
            {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
            - name: SPARK_MODE
              value: "master"
            - name: SPARK_PUBLIC_DNS
              value: spark.dev-steam.c2.par1.kube.qwant.ninja
            {{- if .Values.metrics.enabled }}
            - name: SPARK_METRICS_ENABLED
              value: "true"
            {{- end}}
            - name: SPARK_DAEMON_MEMORY
              value: {{ .Values.master.daemonMemoryLimit | quote }}
            {{- if .Values.master.clusterPort }}
            - name: SPARK_MASTER_PORT
              value: {{ .Values.service.clusterPort | quote }}
            {{- end }}
            {{- if .Values.master.webPort }}
            - name: SPARK_MASTER_WEBUI_PORT
              value: {{ .Values.master.webPort | quote }}
            {{- end }}
            {{- if .Values.master.configOptions }}
            - name: SPARK_MASTER_OPTS
              value: {{ .Values.master.configOptions | quote }}
            {{- end }}
            {{- if .Values.security.rpc.authenticationEnabled }}
            - name: SPARK_RPC_AUTHENTICATION_ENABLED
              value: {{ .Values.security.rpc.authenticationEnabled | quote }}
            - name: SPARK_RPC_AUTHENTICATION_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "spark.passwordsSecretName" . }}
                  key: rpc-authentication-secret
            {{- end }}
            {{- if .Values.security.rpc.encryptionEnabled }}
            - name: SPARK_RPC_ENCRYPTION_ENABLED
              value: {{ .Values.security.rpc.encryptionEnabled | quote }}
            {{- end }}
            {{- if .Values.security.storageEncryptionEnabled }}
            - name: SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED
              value: {{ .Values.security.storageEncryptionEnabled | quote }}
            {{- end }}
            {{- if .Values.master.extraEnvVars }}
            {{- toYaml .Values.master.extraEnvVars | nindent 12 }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.master.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.master.webPort }}
            initialDelaySeconds: {{ .Values.master.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.master.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.master.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.master.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.master.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.master.webPort }}
            initialDelaySeconds: {{ .Values.master.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.master.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.master.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.master.readinessProbe.failureThreshold }}
          {{- end }}
          {{- end }}
          {{- with .Values.master.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: bitnami-tmp
          emptyDir: {}
        - name: spark-logs
          emptyDir: {}
        - name: spark-conf
          emptyDir: {}
        {{- if .Values.master.configurationConfigMap }}
        - name: config
          configMap:
            name: {{ .Values.master.configurationConfigMap }}
        {{- end }}
        {{- if .Values.master.extraVolumes }}
        {{- tpl (toYaml .Values.master.extraVolumes) $ | nindent 8 }}
        {{- end }}